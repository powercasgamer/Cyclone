apply plugin: "java"
apply plugin: "java-library"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "net.kyori.indra.git"
apply plugin: "io.freefair.aggregate-javadoc"

def targetJavaVersion = "${javaVersion}"?.isInteger() ? "${javaVersion}".toInteger() : 8
def currentJava = JavaVersion.current()
def javaVersion = JavaVersion.toVersion(targetJavaVersion)

repositories {
    mavenCentral()
    maven {
        name("DeltaPvP")
        url("https://repo.deltapvp.net/")
    }
}

// java
java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (currentJava < javaVersion) {
        toolchain.languageVersion = javaVersion
    }
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
        
    withJavadocJar()
    withSourcesJar()
}

// javacompile
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add('-Xlint:deprecation')
    options.encoding = "UTF-8"
    options.deprecation = true
    options.incremental = true 
    if (targetJavaVersion >= 10 || currentJava.isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

// abstract archive
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = true
    reproducibleFileOrder = true
}

// source sets
sourceSets {
    main.java.srcDirs += "src/main/java"
    main.resources.srcDirs += "src/main/resources"
}

// process resources
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand 'pluginVersion': project.ext.fullVersion
    }
}

// jar
jar {
    classifier("thin")
    archiveVersion.set("${project.ext.fullVersion}")
    from("../LICENSE.txt")
    if (indraGit != null) {
        indraGit.applyVcsInformationToManifest(manifest)
    }
    manifest {
        attributes(
            "Multi-Release": "true",
            "Specification-Vendor": "powercas_gamer",
            "Specification-Version": project.ext.fullVersion,
            "Implementation-Version": project.ext.fullVersion,
            "Automatic-Module-Name": "net.deltapvp.cyclone"
        )
    }
}

sourcesJar {
    //from sourceSets.main.allJava
    classifier("sources")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveVersion.set("${project.ext.fullVersion}")
}

javadocJar {
    //from javadoc
    classifier("javadoc")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveVersion.set("${project.ext.fullVersion}")
    dependsOn(javadoc)
}

// configuration
configurations.all {
    resolutionStrategy.cacheChangingModulesFor(15, "minutes")
}

// javadoc
def pjName = "${project.name}"
def jdTitle = pjName.toUpperCase() + " API (v${project.ext.fullVersion})"
javadoc {
    onlyIf {
        System.getenv("CI") == null && project.hasProperty("run-javadoc")
    }
    if (currentJava < JavaVersion.VERSION_11 || currentJava == JavaVersion.VERSION_12) {
       javadocTool.set(javaToolchains.javadocToolFor { this.languageVersion.set(JavaLanguageVersion.of(11)) })
    }
    title(jdTitle)
    options.links(
        // paper projects
        "https://papermc.io/javadocs/paper/1.18/",
        "https://papermc.io/javadocs/waterfall/1.18/",
        "https://jd.velocitypowered.com/3.0.0/",
        // kyori projects
        "https://jd.adventure.kyori.net/api/${libs.versions.adventure}/",
        "https://jd.adventure.kyori.net/key/${libs.versions.adventure}/",
        "https://jd.adventure.kyori.net/text-serializer-legacy/${libs.versions.adventure}/",
        "https://jd.adventure.kyori.net/text-serializer-plain/${libs.versions.adventure}/",
        "https://jd.adventure.kyori.net/text-serializer-gson/${libs.versions.adventure}/",
        "https://javadoc.io/doc/net.kyori/adventure-platform-bukkit/${libs.versions.adventure.platform}/",
        "https://javadoc.io/doc/net.kyori/adventure-platform-bungeecord/${libs.versions.adventure.platform}/",
        // logging
        "https://www.slf4j.org/apidocs/",
        "https://javadoc.io/doc/org.apache.logging.log4j/log4j-api/${libs.versions.log4j}/",
        "https://javadoc.io/doc/org.apache.logging.log4j/log4j-core/${libs.versions.log4j}/",
        "https://javadoc.io/doc/org.apache.logging.log4j/log4j-iostreams/${libs.versions.log4j}/",
        "https://javadoc.io/doc/org.apache.logging.log4j/log4j-jul/${libs.versions.log4j}/",
        "https://javadoc.io/doc/org.apache.logging.log4j/log4j-jpl/${libs.versions.log4j}/",
        // okhttp
     //   "https://square.github.io/okhttp/3.x/okhttp/",
        // google stuff
        "https://guava.dev/releases/31.0.1-jre/api/docs/",
        "https://javadoc.io/doc/com.google.code.gson/gson/${libs.versions.gson}/",
        // apis
        "https://javadoc.io/doc/net.luckperms/api/${libs.versions.luckperms}/",
        "https://javadoc.io/doc/cloud.commandframework/cloud-core/${libs.versions.cloud}/",
        "https://javadoc.io/doc/cloud.commandframework/cloud-velocity/${libs.versions.cloud}/",
        "https://javadoc.io/doc/cloud.commandframework/cloud-paper/${libs.versions.cloud}/",
        "https://javadoc.io/doc/cloud.commandframework/cloud-bukkit/${libs.versions.cloud}/",
        "https://javadoc.io/doc/cloud.commandframework/cloud-minecraft-extras/${libs.versions.cloud}/",
        "https://javadoc.io/doc/cloud.commandframework/cloud-brigadier/${libs.versions.cloud}/",
        "https://javadoc.io/doc/cloud.commandframework/cloud-annotations/${libs.versions.cloud}/",
        "https://javadoc.io/doc/net.dv8tion/JDA/${libs.versions.jda}/",
        // other libraries
        "https://javadoc.io/doc/com.github.ben-manes.caffeine/caffeine/${libs.versions.caffeine}/",
        "https://javadoc.io/doc/redis.clients/jedis/${libs.versions.jedis}/",
        "https://javadoc.io/doc/org.mongodb/bson/${libs.versions.mongo}/",
        "https://javadoc.io/doc/org.mongodb/mongodb-driver-sync/${libs.versions.mongo}/",
        // misc
        "https://javadoc.io/doc/org.jetbrains/annotations/${libs.versions.annotations}/",
        "https://checkerframework.org/api/",
        "https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.2/"
    )

    setFailOnError(false)
    options.tags("sinceMinecraft:a:Since Minecraft:")
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding("UTF-8")
    options.charSet("UTF-8")
    options.addBooleanOption('Xdoclint:none', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('detectJavaApiLink', false)
    options.linkSource()
    options.addBooleanOption("html5", true) 
    options.addStringOption("-release", "8")
    if (currentJava > JavaVersion.VERSION_1_8) {
        options.links.add("https://docs.oracle.com/en/java/javase/17/docs/api/")
    } else {
        options.links.add("https://docs.oracle.com/javase/8/docs/api/")
    }
    if (currentJava > JavaVersion.VERSION_1_8 && currentJava < JavaVersion.VERSION_12) {
        options.addBooleanOption("-no-module-directories", true)
    }
    if (JavaVersion.VERSION_11 < currentJava) {
        options.addBooleanOption("Xdoclint:all,-missing", true)
    }
 
    dependsOn(sourcesJar)
    def toExclude = [
        "**/*.kt", "**/*.properties", "**/*.yml", "**/*.json",
        "**/*.gradle*", "**/*.txt", "**/*.MF"
    ]
    include("**/*.java")
    toExclude.forEach {
        exclude(it)
    }
    source = sourcesJar.source.asFileTree
}

tasks.named('aggregateJavadoc').configure {
    onlyIf {
        System.getenv("CI") == null && project.hasProperty("run-javadoc")
    }
    if (currentJava < JavaVersion.VERSION_11 || currentJava == JavaVersion.VERSION_12) {
       javadocTool.set(javaToolchains.javadocToolFor { this.languageVersion.set(JavaLanguageVersion.of(11)) })
    }
    title = "Cyclone ${project.ext.fullVersion}"
    options.addBooleanOption("Xdoclint:-missing", true)
    if (currentJava > JavaVersion.VERSION_1_8 && currentJava < JavaVersion.VERSION_12) {
        options.addBooleanOption("-no-module-directories", true)
    }
}

copy {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

artifacts {
    archives javadocJar
    archives shadowJar
    shadow shadowJar
    archives sourcesJar
    archives jar
}

build {
    dependsOn(jar)
    dependsOn(javadocJar)
    dependsOn(sourcesJar)
    dependsOn(shadowJar)
    jar.mustRunAfter(clean)
    shadowJar.mustRunAfter(sourcesJar)
    dependsOn(signArchives)
}

boolean isJavadocRunning() {
    def ciEnv = System.getenv("CI") == null
    //def noJdProp = providers.gradleProperty("NO_JAVADOC").map(b -> Boolean.parseBoolean(b)).getOrElse(false)
    return ciEnv// || noJdProp
}