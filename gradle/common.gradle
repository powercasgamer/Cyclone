apply plugin: "java"
apply plugin: "java-library"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "net.kyori.indra.git"
apply plugin: "io.freefair.aggregate-javadoc"

def targetJavaVersion = "${javaVersion}"?.isInteger() ? "${javaVersion}".toInteger() : 8
def currentJava = JavaVersion.current()
def javaVersion = JavaVersion.toVersion(targetJavaVersion)

repositories {
    mavenCentral()
    maven {
        name("DeltaPvP")
        url("https://repo.deltapvp.net/")
    }
}

// java
java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (currentJava < javaVersion) {
        toolchain.languageVersion = javaVersion
    }
        
    withJavadocJar()
    withSourcesJar()
}

// javacompile
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add('-Xlint:deprecation')
    options.encoding = "UTF-8"
    options.deprecation = true
    options.incremental = true 
    options.release.set(8)
}

// abstract archive
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = true
    reproducibleFileOrder = true
}

// source sets
sourceSets {
    main.java.srcDirs += "src/main/java"
    main.resources.srcDirs += "src/main/resources"
}

// process resources
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand 'pluginVersion': project.ext.fullVersion
    }
}

// jar
jar {
    classifier("thin")
    archiveVersion.set("${project.ext.fullVersion}")
    from("../LICENSE.txt")
    if (indraGit != null) {
        indraGit.applyVcsInformationToManifest(manifest)
    }
    manifest {
        attributes(
            "Multi-Release": "true",
            "Specification-Vendor": "powercas_gamer",
            "Specification-Version": project.ext.fullVersion,
            "Implementation-Version": project.ext.fullVersion,
            "Automatic-Module-Name": "net.deltapvp.cyclone"
        )
    }
}

sourcesJar {
    //from sourceSets.main.allJava
    classifier("sources")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveVersion.set("${project.ext.fullVersion}")
}

javadocJar {
    //from javadoc
    classifier("javadoc")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveVersion.set("${project.ext.fullVersion}")
    dependsOn(javadoc)
}

// configuration
configurations.all {
    resolutionStrategy.cacheChangingModulesFor(15, "minutes")
}

// javadoc
def pjName = "${project.name}"
def jdTitle = pjName.toUpperCase() + " API (v${project.ext.fullVersion})"
javadoc {
    onlyIf {
        System.getenv("CI") == null && project.hasProperty("run-javadoc")
    }
//       javadocTool.set(javaToolchains.javadocToolFor { this.languageVersion.set(JavaLanguageVersion.of(17)) })
    title(jdTitle)
    options.links(
        // paper projects
        "https://papermc.io/javadocs/paper/1.12/",
        "https://javadoc.io/doc/org.jetbrains/annotations/23.0.0/"
    )

    setFailOnError(false)
    options.tags("sinceMinecraft:a:Since Minecraft:")
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding("UTF-8")
    options.charSet("UTF-8")
    options.addBooleanOption('Xdoclint:none', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('detectJavaApiLink', false)
    options.linkSource()
    options.addBooleanOption("html5", true) 
    //options.addStringOption("-release", "8")
    //if (currentJava > JavaVersion.VERSION_1_8) {
        options.links.add("https://docs.oracle.com/en/java/javase/17/docs/api/")
    //} else {
    //    options.links.add("https://docs.oracle.com/javase/8/docs/api/")
    //}
    if (currentJava > JavaVersion.VERSION_1_8 && currentJava < JavaVersion.VERSION_12) {
        options.addBooleanOption("-no-module-directories", true)
    }
    if (JavaVersion.VERSION_11 < currentJava) {
        options.addBooleanOption("Xdoclint:all,-missing", true)
    }
 
    dependsOn(sourcesJar)
    def toExclude = [
        "**/*.kt", "**/*.properties", "**/*.yml", "**/*.json",
        "**/*.gradle*", "**/*.txt", "**/*.MF"
    ]
    include("**/*.java")
    toExclude.forEach {
        exclude(it)
    }
    source = sourcesJar.source.asFileTree
}

tasks.named('aggregateJavadoc').configure {
    onlyIf {
        System.getenv("CI") == null && project.hasProperty("run-javadoc")
    }
  //  javadocTool.set(javaToolchains.javadocToolFor { this.languageVersion.set(JavaLanguageVersion.of(17)) })
    title = "Cyclone ${project.ext.fullVersion}"
    options.addBooleanOption("Xdoclint:-missing", true)
    if (currentJava > JavaVersion.VERSION_1_8 && currentJava < JavaVersion.VERSION_12) {
        options.addBooleanOption("-no-module-directories", true)
    }
}

copy {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

artifacts {
    archives javadocJar
    archives shadowJar
    shadow shadowJar
    archives sourcesJar
    archives jar
}

build {
    dependsOn(jar)
    dependsOn(javadocJar)
    dependsOn(sourcesJar)
    dependsOn(shadowJar)
    jar.mustRunAfter(clean)
    shadowJar.mustRunAfter(sourcesJar)
    dependsOn(signArchives)
}

boolean isJavadocRunning() {
    def ciEnv = System.getenv("CI") == null
    //def noJdProp = providers.gradleProperty("NO_JAVADOC").map(b -> Boolean.parseBoolean(b)).getOrElse(false)
    return ciEnv// || noJdProp
}